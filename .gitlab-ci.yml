stages:
  - build-image
  - validate
  - build
  - cleanup

variables:
  PACKER_VERSION: "1.14.1"
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:latest"
  DOCKER_DRIVER: overlay2

# Build Docker image with Packer (runs on inet runner)
build-packer-image:
  stage: build-image
  tags:
    - inet
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg PACKER_VERSION=$PACKER_VERSION -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
  only:
    changes:
      - Dockerfile
    refs:
      - merge_requests
      - main
      - tags

# Validation stage (runs on inet runner with Docker image)
packer-validate:
  stage: validate
  tags:
    - inet
  image: $DOCKER_IMAGE
  script:
    - echo "Validating Packer templates..."
    - packer validate -var-file="configs/debian-12/variables.pkrvars.hcl" -only="debian-12.*" .
    - packer validate -var-file="configs/debian-13/variables.pkrvars.hcl" -only="debian-13.*" .
    - packer validate -var-file="configs/ubuntu-22.04/variables.pkrvars.hcl" -only="ubuntu-22-04.*" .
    - packer validate -var-file="configs/ubuntu-24.04/variables.pkrvars.hcl" -only="ubuntu-24-04.*" .
  only:
    - merge_requests
    - main

# Build templates (runs on esxi runner with vCenter access)
build-debian-12:
  stage: build
  tags:
    - esxi
  image: $DOCKER_IMAGE
  script:
    - echo "Building Debian 12 template..."
    - packer build -var-file="configs/debian-12/variables.pkrvars.hcl" builds/debian-12.pkr.hcl
    - echo "Publishing Debian 12 template..."
    - |
      # Set govc environment variables
      export GOVC_URL="$VCENTER_URL"
      export GOVC_USERNAME="$VCENTER_USERNAME" 
      export GOVC_PASSWORD="$VCENTER_PASSWORD"
      export GOVC_INSECURE=1
      
      # Convert VM to template (adjust VM name pattern as needed)
      VM_NAME=$(govc find . -type m -name "*debian-12*" | head -1)
      if [ -n "$VM_NAME" ]; then
        echo "Converting $VM_NAME to template..."
        govc vm.markastemplate "$VM_NAME"
      else
        echo "No Debian 12 VM found to convert"
      fi
  artifacts:
    reports:
      junit: packer-manifest.json
    expire_in: 1 week
  only:
    variables:
      - $BUILD_DEBIAN_12 == "true"
    refs:
      - main
      - tags
  timeout: 2h

build-debian-13:
  stage: build
  tags:
    - esxi
  image: $DOCKER_IMAGE
  script:
    - echo "Building Debian 13 template..."
    - packer build -var-file="configs/debian-13/variables.pkrvars.hcl" builds/debian-13.pkr.hcl
    - echo "Publishing Debian 13 template..."
    - |
      # Set govc environment variables
      export GOVC_URL="$VCENTER_URL"
      export GOVC_USERNAME="$VCENTER_USERNAME" 
      export GOVC_PASSWORD="$VCENTER_PASSWORD"
      export GOVC_INSECURE=1
      
      # Convert VM to template (adjust VM name pattern as needed)
      VM_NAME=$(govc find . -type m -name "*debian-13*" | head -1)
      if [ -n "$VM_NAME" ]; then
        echo "Converting $VM_NAME to template..."
        govc vm.markastemplate "$VM_NAME"
      else
        echo "No Debian 13 VM found to convert"
      fi
  artifacts:
    reports:
      junit: packer-manifest.json
    expire_in: 1 week
  only:
    variables:
      - $BUILD_DEBIAN_13 == "true"
    refs:
      - main
      - tags
  timeout: 2h

build-ubuntu-22-04:
  stage: build
  tags:
    - esxi
  image: $DOCKER_IMAGE
  script:
    - echo "Building Ubuntu 22.04 template..."
    - packer build -var-file="configs/ubuntu-22.04/variables.pkrvars.hcl" builds/ubuntu-22.04.pkr.hcl
    - echo "Publishing Ubuntu 22.04 template..."
    - |
      # Set govc environment variables
      export GOVC_URL="$VCENTER_URL"
      export GOVC_USERNAME="$VCENTER_USERNAME" 
      export GOVC_PASSWORD="$VCENTER_PASSWORD"
      export GOVC_INSECURE=1
      
      # Convert VM to template (adjust VM name pattern as needed)
      VM_NAME=$(govc find . -type m -name "*ubuntu-22*" | head -1)
      if [ -n "$VM_NAME" ]; then
        echo "Converting $VM_NAME to template..."
        govc vm.markastemplate "$VM_NAME"
      else
        echo "No Ubuntu 22.04 VM found to convert"
      fi
  artifacts:
    reports:
      junit: packer-manifest.json
    expire_in: 1 week
  only:
    variables:
      - $BUILD_UBUNTU_22_04 == "true"
    refs:
      - main
      - tags
  timeout: 2h

build-ubuntu-24-04:
  stage: build
  tags:
    - esxi
  image: $DOCKER_IMAGE
  script:
    - echo "Building Ubuntu 24.04 template..."
    - packer build -var-file="configs/ubuntu-24.04/variables.pkrvars.hcl" builds/ubuntu-24.04.pkr.hcl
    - echo "Publishing Ubuntu 24.04 template..."
    - |
      # Set govc environment variables
      export GOVC_URL="$VCENTER_URL"
      export GOVC_USERNAME="$VCENTER_USERNAME" 
      export GOVC_PASSWORD="$VCENTER_PASSWORD"
      export GOVC_INSECURE=1
      
      # Convert VM to template (adjust VM name pattern as needed)
      VM_NAME=$(govc find . -type m -name "*ubuntu-24*" | head -1)
      if [ -n "$VM_NAME" ]; then
        echo "Converting $VM_NAME to template..."
        govc vm.markastemplate "$VM_NAME"
      else
        echo "No Ubuntu 24.04 VM found to convert"
      fi
  artifacts:
    reports:
      junit: packer-manifest.json
    expire_in: 1 week
  only:
    variables:
      - $BUILD_UBUNTU_24_04 == "true"
    refs:
      - main
      - tags
  timeout: 2h

# Build all templates (manual trigger)
build-all-templates:
  stage: build
  tags:
    - esxi
  image: $DOCKER_IMAGE
  script:
    - echo "Building all templates..."
    - |
      # Set govc environment variables
      export GOVC_URL="$VCENTER_URL"
      export GOVC_USERNAME="$VCENTER_USERNAME" 
      export GOVC_PASSWORD="$VCENTER_PASSWORD"
      export GOVC_INSECURE=1
      
      for template in debian-12 debian-13 ubuntu-22.04 ubuntu-24.04; do
        echo "Building $template..."
        packer build -var-file="configs/$template/variables.pkrvars.hcl" "builds/$template.pkr.hcl" || {
          echo "Failed to build $template"
          exit 1
        }
        
        echo "Publishing $template template..."
        VM_NAME=$(govc find . -type m -name "*$template*" | head -1)
        if [ -n "$VM_NAME" ]; then
          echo "Converting $VM_NAME to template..."
          govc vm.markastemplate "$VM_NAME"
        else
          echo "No $template VM found to convert"
        fi
      done
  artifacts:
    reports:
      junit: packer-manifest.json
    expire_in: 1 week
  when: manual
  timeout: 4h

# Cleanup old templates (optional)
cleanup-old-templates:
  stage: cleanup
  tags:
    - esxi
  image: $DOCKER_IMAGE
  script:
    - echo "Cleaning up old templates from vCenter..."
    - |
      # Set govc environment variables (these should be set as CI/CD variables)
      export GOVC_URL="$VCENTER_URL"
      export GOVC_USERNAME="$VCENTER_USERNAME"
      export GOVC_PASSWORD="$VCENTER_PASSWORD"
      export GOVC_INSECURE=1
      
      # List and remove old templates (example logic)
      echo "Finding templates older than 30 days..."
      
      # Example cleanup commands using govc
      # govc find . -type m -name "packer-*" | while read template; do
      #   created=$(govc object.collect -s "$template" config.createDate)
      #   # Add date comparison logic here
      #   echo "Would remove old template: $template"
      # done
      
      echo "Cleanup logic would remove old templates here"
  when: manual
  only:
    - main

# Security scanning (optional)
security-scan:
  stage: validate
  tags:
    - inet
  image: $DOCKER_IMAGE
  script:
    - echo "Running security scans on Packer templates"
    - |
      # Example: scan for sensitive data in templates
      if grep -r "password\|secret\|key" configs/ --exclude-dir=.git; then
        echo "Warning: Found potential sensitive data in templates"
      fi
  needs:
    - build-packer-image
  allow_failure: true
  only:
    - merge_requests
    - main
